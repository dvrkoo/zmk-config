/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <175>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <31 39 40 41 30 18 19 32 20 21 33 35 34 23 22 10 11 9 8 7 6>;
            flavor = "balanced";
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <175>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <38 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            hold-trigger-on-release;             // delay positional check until key-release
        };

        layers: layers {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        gaming {
            bindings = <&tog 3>;
            key-positions = <37 39>;
            require-prior-idle-ms = <0>;
        };

        media {
            bindings = <&none>;
            key-positions = <36 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q              &kp W         &kp E            &kp R             &kp T        &kp Y  &kp U          &kp I             &kp O         &kp P            &kp RIGHT_BRACKET
&kp LSHFT       &hml LEFT_SHIFT A  &hml LCTRL S  &hml LEFT_ALT D  &hml LGUI F       &kp G        &kp H  &hmr RGUI J    &hmr RIGHT_ALT K  &hmr RCTRL L  &hmr RSHFT SEMI  &kp SQT
&mt LCTRL NUBS  &kp Z              &kp X         &kp C            &kp V             &kp B        &kp N  &kp M          &kp COMMA         &kp DOT       &kp FSLH         &kp PLUS
                                                 &kp LGUI         &layers 2 ESCAPE  &kp SPACE    &kp A  &kp BACKSPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE   &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp MINUS
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR      &kp RPAR  &kp UNDER
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp RA(LBKT)  &kp RA(RBKT)  &kp BSLH  &kp LEFT_BRACKET
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp RA(LBRC)  &kp RA(RBRC)  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R   &kp T        &kp Y      &kp U          &kp I          &kp O    &kp P     &trans
&kp LSHFT  &kp A  &kp S  &kp D     &kp F   &kp G        &kp H      &kp J          &kp K          &kp L    &kp SEMI  &trans
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V   &kp B        &kp N      &kp M          &kp COMMA      &kp DOT  &kp FSLH  &trans
                         &kp LGUI  &trans  &kp SPACE    &kp ENTER  &kp BACKSPACE  &kp RIGHT_ALT
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans         &trans  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &soft_off      &trans  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bootloader    &trans  &trans             &trans            &trans           &trans  &trans
                        &trans  &trans  &trans         &trans  &trans             &trans
            >;
        };
    };
};
